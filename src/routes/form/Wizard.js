import { h, Component } from 'preact';
import { Formik } from 'formik';
import { DisplayFormikState } from './helper';
import PageOne from './PageOne';
import PageTwo from './PageTwo';
import PageThree from './PageThree';
import PageFour from './PageFour';
import PageFive from './PageFive';
import Wiz from './Wiz';
import MaskedInput from "react-text-mask";
import Progress from 'preact-progress';
import { SignUpSchema } from './validation';
import base64 from 'base-64';
import Debug from './helper'

// Get data for userAgent
const userAgent = navigator.userAgent;
// Get Lead id from hidden input field generated by Lead_id script on template.html file
const universal_leadid = document.getElementById('leadid_token').value;
let ip_address = ""

class Wizard extends Component {
  
  state = {
    pageIndex: 0,
    initialValues: {
      numberOnPolicy: '',
      home_zip: '',
      dateOfBirth: '',
      gender: '',
      tobacco: '',
      income: '',
      coverageType: '',
      name_first: '',
      name_last: '',
      home_street: '',
      email: '',
      phone_home: '',
      coverageType: '',
      user_agent: userAgent,
      universal_leadid: universal_leadid,
      trusted_form_url: "",
      ip_address: ""
    }
  };

  // Get Ip address from api
  getIpAddress = () => {
    let self = this;
    fetch('https://json.geoiplookup.io/')
    .then(
      function(response) {
        if (response.status !== 200) {
          console.log('Looks like there was a problem. Status Code: ' +
            response.status);
          return;
        }

        // Examine the text in the response
        response.json().then(function(data) {
          console.log(data.ip);
          // self.setState({
          //   initialValues: {...self.state.initialValues, ip_address: data.ip}
          // }, ()=>{console.log(self.state)})
          ip_address=data.ip
        });
      }
    )
    .catch(function(err) {
      console.log('Fetch Error :-S', err);
    });
  }

  submitForm = (data) => {
    fetch('https://staging.one.pingtreetech.com/api/health/post', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      },
      body: data
    })
    .then((res) => res.json())
    .then((data) => console.log(JSON.stringify(data)));
  }

  claimTrustedForm = (url, formData) => {
    // fetch(url, {
    //   method: 'POST',
    //   mode: "no-cors",
    //   headers: {
    //     'Accept': 'application/json',
    //     'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    //     'Authorization': 'Basic ' + base64.encode('API:ab1df3c9f52238e3cbcea4ebec3dd742')
    //   },
    //   body: formData
    // })
    // .then((res) => res.json())
    // .then((data) => console.log(data));
    console.log("FORM DATA-------------> ", formData)
    const testData = "numberOnPolicy=1&home_zip=12345&gender=M&tobacco=1&income=125000&coverageType=Silver&name_first=dsd&name_last=ddd&home_street=MojaUlica&email=zeko@konj.com&phone_home=111201111111&universal_leadid=241A04AB-07CB-9EAE-CA97-71466F0E1F59&trusted_form_url=https://cert.trustedform.com/48a9419ed5e03681137b72aaa23dbe005ac5f065&ip_address=178.148.90.113&home_city=Schenectady&home_state=NY&client_name=HealthDefault&sub_id1=s1&sub_id2=s2&sub_id3=s3&dob=2000-11-11"
    fetch(`https://cert.trustedform.com/48a9419ed5e03681137b72aaa23dbe005ac5f065`, {
      method: 'POST',
      mode: "no-cors",
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'Authorization': 'Basic ' + base64.encode('API:ab1df3c9f52238e3cbcea4ebec3dd742')
      },
      body: testData
    })
    .then(
      function(response) {
        if (response.status !== 200) {
          console.log('Looks like there was a problem. Status Code: ' +
            response.status);
          return;
        }

        // Examine the text in the response
        response.json().then(function(data) {
          console.log(data);
          // self.setState({
          //   initialValues: {...self.state.initialValues, ip_address: data.ip}
          // }, ()=>{console.log(self.state)})
          // ip_address=data.ip
        });
      }
    )
    .catch(function(err) {
      console.log('Fetch Error :-S', err);
    });
  } 

  componentWillMount () {
    // Checking if we have session storage created
    if(sessionStorage.getItem('getmyhealth')){
      // If storage exists set initial values from storage
      const initialValues = JSON.parse(sessionStorage.getItem('getmyhealth'))
      this.setState({
        initialValues: initialValues
      })
    } else {
      // if storage does not exists set component initial values to storage
      sessionStorage.setItem('getmyhealth', JSON.stringify(this.state.initialValues))
    }
    // Get Ip address 
    this.getIpAddress();
  }
  
  
  handleSubmit = (values) => {
    // getting aff values
    values.client_name= this.props.affid || 'HealthDefault';
    values.sub_id1= this.props.sub_id1 || 's1';
    values.sub_id2= this.props.sub_id2 || 's2';
    values.sub_id3= this.props.sub_id3 || 's3';

    // hardcoding some values
    // values.user_agent= 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3776.0 Safari/537.36';
    // values.ip_address = '127.0.0.1';
    // values.home_city = 'Beverly Hills';
    // values.home_state = 'CA';
    values.datetime_collected = new Date().toISOString();

    // get date of birth in correct format
    const month = values.dateOfBirth.substr(0, 2);
    const day = values.dateOfBirth.substr(3, 2);
    const year = values.dateOfBirth.substr(6, 4);
    values.dob = year + '-' + month + '-' + day;
    delete values.dateOfBirth;

    //Assign ip address to values 
    values.ip_address = ip_address;

    //Assign trusted from url. Value get from trusted from script on template.html
    let  trusted_form_url_value =  document.getElementById('trusted_form_url_0').value;
    values.trusted_form_url = trusted_form_url_value;

    const data = Object.keys(values).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(values[k])}`).join('&');
    console.log('form data object: ', values);
    console.log('form data query: ', data);

    // fetch('https://staging.one.pingtreetech.com/api/health/post', {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    //   },
    //   body: data
    // })
    // .then((res) => res.json())
    // .then((data) => console.log(JSON.stringify(data)));
    
    this.claimTrustedForm(trusted_form_url_value, data)
  }

  render() {
    return (
      <Wiz pages={[PageOne, PageTwo, PageThree, PageFour, PageFive] } testVal={this.state}>
      {wizProps => (
        <Formik
          initialValues={this.state.initialValues}
          validationSchema={SignUpSchema}
          handleChange
          // enableReinitialize
          onSubmit={(values, { setSubmitting }) => {
            // setTimeout(() => {
              this.handleSubmit(values);
              setSubmitting(false);
            // }, 1000);
          }}
        >
          {props => {
            const { handleSubmit } = props;
            return (
              <form onSubmit={handleSubmit}>
                {wizProps.renderPage(props)}
                
              </form>
            );
          }}
        </Formik>
      )}
    </Wiz>
    );
  }

    // _navigateBack = () => {
    //     this.setState(prevState => ({
    //         pageIndex: prevState.pageIndex - 1 < 0 ? prevState.pageIndex - 1 : 0
    //     }));
    // };

    // _navigateNext = () => {
    //   console.log('test')
    //     this.setState(prevState => ({
    //         pageIndex: prevState.pageIndex + 1
    //     }));
    // };

    // _handleLocalStorage = (e) => {
    //   const tempStorage = JSON.parse(sessionStorage.getItem('getmyhealth'))
    //   console.log(e)
    //   console.log(tempStorage);
    // }

    // _renderPage(props) {
    //     const { pageIndex } = this.state;
    //     const pageHash = {
    //         0: PageOne,
    //         1: PageTwo,
    //         2: PageThree,
    //         3: PageFour,
    //         4: PageFive
    //     };

    //     const Page = pageHash[pageIndex];

    //     return (
    //         <Page
    //         {...props}
    //         navigateBack={this._navigateBack}
    //         navigateNext={this._navigateNext}
    //         pageIndex={pageIndex}
    //       />
    //     );
    // }
}

export default Wizard;
